{
  "version": 3,
  "sources": ["../src/infinite-scroller.js", "../src/integer-iterator.js", "../src/hebrew-numeral.js", "../src/text-filter.js", "../src/display-range.js", "../src/title.js", "../src/location.js", "../src/url-to-ref.js", "../src/fuzzy.js", "../src/event-emitter.js", "../src/index.js", "../components/Line.js", "../components/Page.js", "../components/ParshaPicker.js", "../components/utils.js", "../components/ParshaResult.js", "../components/SelectList.js", "../components/Search.js", "../index.js"],
  "sourcesContent": ["let alreadyInFlight = false\nconst oneAtATime = (promise) => {\n  if (alreadyInFlight) return Promise.resolve()\n  alreadyInFlight = true\n  return promise()\n    .then((val) => {\n      alreadyInFlight = false\n      return val\n    })\n}\n\nconst InfiniteScroller = {\n  new: ({ container, fetchPreviousContent, fetchNextContent }) => ({\n    attach: () => container.addEventListener('scroll', (e) => {\n      const scrollView = e.target\n\n      const hiddenAboveHeight = scrollView.scrollTop\n      const height = scrollView.clientHeight\n\n      const hiddenBelowHeight = scrollView.scrollHeight - (scrollView.clientHeight + scrollView.scrollTop)\n\n      if (hiddenAboveHeight < 0.5 * height) {\n        oneAtATime(() => fetchPreviousContent.fetch())\n          .then(fetched => {\n            if (!fetched) return\n\n            const belowHeight = scrollView.scrollHeight - scrollView.scrollTop\n\n            fetchPreviousContent.render(fetched)\n\n            scrollView.scrollTop = scrollView.scrollHeight - belowHeight\n          })\n      } else if (hiddenBelowHeight < 0.5 * height) {\n        oneAtATime(() => fetchNextContent.fetch())\n          .then(fetched => {\n            if (fetched) fetchNextContent.render(fetched)\n          })\n      }\n    })\n  })\n}\n\nmodule.exports = InfiniteScroller\n", "module.exports = {\n  new: ({ startingAt }) => {\n    let previousCount = 0\n    let nextCount = 0\n\n    return {\n      previous: () => {\n        previousCount += 1\n        return startingAt - previousCount\n      },\n      next: () => {\n        nextCount += 1\n        return startingAt + nextCount - 1\n      }\n    }\n  }\n}\n", "const letters = [\n    {glyph: '\u05D0', value: 1},\n    {glyph: '\u05D1', value: 2},\n    {glyph: '\u05D2', value: 3},\n    {glyph: '\u05D3', value: 4},\n    {glyph: '\u05D4', value: 5},\n    {glyph: '\u05D5', value: 6},\n    {glyph: '\u05D6', value: 7},\n    {glyph: '\u05D7', value: 8},\n    {glyph: '\u05D8', value: 9},\n    {glyph: '\u05D9', value: 10},\n    {glyph: '\u05DB', value: 20},\n    {glyph: '\u05DC', value: 30},\n    {glyph: '\u05DE', value: 40},\n    {glyph: '\u05E0', value: 50},\n    {glyph: '\u05E1', value: 60},\n    {glyph: '\u05E2', value: 70},\n    {glyph: '\u05E4', value: 80},\n    {glyph: '\u05E6', value: 90},\n    {glyph: '\u05E7', value: 100},\n    {glyph: '\u05E8', value: 200},\n    {glyph: '\u05E9', value: 300},\n    {glyph: '\u05EA', value: 400}\n]\n  .reverse()\n\nconst hebrewNumeral = (n) => {\n  if (n <= 0) return ''\n  if (n === 15) return '\u05D8\u05D5'\n  if (n === 16) return '\u05D8\u05D6'\n\n  let i = 0\n  while (n < letters[i].value) {\n    ++i\n  }\n\n  const letter = letters[i]\n\n  return `${letter.glyph}${hebrewNumeral(n - letter.value)}`\n}\n\nmodule.exports = hebrewNumeral\n", "const NUN_HAFUCHA = '\u05C6'\n\nconst ketiv = (text) => text\n  .replace('#(\u05E4)', '')\n  .replace(`#(${NUN_HAFUCHA})`, ` ${NUN_HAFUCHA}`)\n  .split(' ')\n  .map((maqafSeparatedWord) => maqafSeparatedWord\n    .split('\u05BE')\n    .map(word => {\n      const parts = word.split('#')\n\n      if (parts.length <= 1) {\n        // i.e. there is no `#`, so just take the word\n        return parts[0]\n      }\n\n      return `{${parts\n        .slice(1)\n        .map(bracketed => bracketed.slice(1, -1))\n        .join(' ')}}`\n    })\n    .join('\u05BE')\n  )\n  .join(' ')\n\nconst kri = (text) => text\n  .replace(/\u05BE/g, ' ')\n  .replace('#(\u05E4)', '')\n  .replace(`#(${NUN_HAFUCHA})`, ` ${NUN_HAFUCHA}`)\n  .split(' ')\n  .map((word) => {\n    const parts = word.split('#')\n\n    return parts[0]\n  })\n  .join(' ')\n  .replace(new RegExp(`[^\u05D0-\u05EA\\\\s${NUN_HAFUCHA}]`, 'g'), '')\n\nmodule.exports = ({ text, annotated }) => annotated ? ketiv(text) : kri(text)\n", "const hebrewNumeralFromInteger = require('./hebrew-numeral')\n\nvar asRange = (strings) => {\n  if (!strings.length) {\n    return ''\n  }\n\n  if (strings.length === 1) {\n    return strings[0]\n  }\n\n  return [strings[0], strings[strings.length - 1]].join('-')\n}\n\nconst aliyotStrings = [\n  '\u05E8\u05D0\u05E9\u05D5\u05DF',\n  '\u05E9\u05E0\u05D9',\n  '\u05E9\u05DC\u05D9\u05E9\u05D9',\n  '\u05E8\u05D1\u05D9\u05E2\u05D9',\n  '\u05D7\u05DE\u05D9\u05E9\u05D9',\n  '\u05E9\u05E9\u05D9',\n  '\u05E9\u05D1\u05D9\u05E2\u05D9',\n  '\u05DE\u05E4\u05D8\u05D9\u05E8'\n]\n\nconst aliyahName = ({ aliyah, getParshaName }) => {\n  if (aliyah < 1 || aliyah > aliyotStrings.length) return null\n\n  if (aliyah === 1) return getParshaName()\n\n  return aliyotStrings[aliyah - 1]\n}\n\nconst aliyotNames = (aliyot, getParshaName) => aliyot\n  .map((aliyah) => aliyahName({ aliyah, getParshaName }))\n\nconst asVersesRange = (verses) => asRange(verses.map((verse) => {\n  const components = []\n\n  if (verse.verse === 1) {\n    components.push(verse.chapter)\n  }\n\n  components.push(verse.verse)\n\n  return components\n    .map((num) => hebrewNumeralFromInteger(num))\n    .join(':')\n}))\n\nconst asAliyotRange = (aliyot, getParshaName) => {\n  if (!aliyot.length) {\n    return ''\n  }\n\n  const aliyotByName = aliyotNames(aliyot, getParshaName)\n\n  return aliyotByName[0] + (aliyotByName[1] ? ` [${aliyotByName[1]}]` : '')\n}\n\nmodule.exports = { asVersesRange, asAliyotRange, aliyotStrings, aliyotNames, aliyahName }\n", "module.exports = (parshiyot) => {\n  return parshiyot.join(' \u2013 ')\n}\n", "const toc = require('../build/table-of-contents.json')\nconst estherToc = require('../build/table-of-contents-esther.json')\nconst holydaysToc = require('../build/table-of-contents-holydays.json')\n\nconst tocFromScroll = {\n  torah: toc,\n  esther: estherToc,\n  ...holydaysToc\n}\n\nmodule.exports = {\n  physicalLocationFromRef: ({ ref: { b: book, c: chapter, v: verse }, scroll }) => {\n    const { p: pageNumber, l: lineNumber } = tocFromScroll[scroll][book][chapter][verse]\n    return { pageNumber, lineNumber }\n  },\n\n  defaultRef: () => { return { b: 1, c: 1, v: 1 } },\n\n  resolveToValidRef: ({scroll, book, chapter, verse}) => {\n    const ref = module.exports.defaultRef()\n    if (scroll && (scroll != 'torah')) {\n      return ref\n    }\n    const toc = tocFromScroll.torah\n\n    const convertToValidInt = (val, validValues) => {\n      return (val && (val in validValues)) ? parseInt(val) : 1;\n    }\n    ref.b = convertToValidInt(book, toc)\n    ref.c = convertToValidInt(chapter, toc[ref.b])\n    ref.v = convertToValidInt(verse, toc[ref.b][ref.c])\n    return ref\n  }\n}\n", "const { defaultRef, resolveToValidRef } = require('./location')\n\nmodule.exports = (url) => {\n  if (url instanceof URL) {\n    const hashParts = url.hash.split('/').slice(1);\n    if (hashParts.length > 0) {\n      if ((hashParts[0] == 'r') && (hashParts[1].length > 0)) {\n        const locationRegex = /(\\d+)\\-(\\d+)-(\\d+)/\n        const locationMatch = hashParts[1].match(locationRegex)\n        if (locationMatch) {\n          return resolveToValidRef({\n            scroll: 'torah',\n            book: locationMatch[1],\n            chapter: locationMatch[2],\n            verse: locationMatch[3]\n          })\n        }\n      }\n    }\n  }\n  return defaultRef();\n}\n", "const hasEveryCharacterInOrder = needle => item => (new RegExp(needle\n  .split('')\n  .join('.*')\n, 'i')).test(item)\n\nconst matchIndexes = (needle, match) => {\n  const needleChars = needle.split('')\n  const matchChars = match.split('')\n\n  const indexes = []\n  let needleIndex = 0\n\n  for (let i = 0; i < matchChars.length; i++) {\n    if (needleChars[needleIndex].toLowerCase() === matchChars[i].toLowerCase()) {\n      indexes.push(i)\n      ++needleIndex\n\n      if (needleIndex >= needleChars.length) break\n    }\n  }\n\n  return indexes\n}\n\nconst indexScore = (needle, match) => {\n  const indexes = matchIndexes(needle, match)\n\n  return indexes\n    .map(index => index - indexes[0])\n    .reduce((a, b) => a + b, 0)\n}\n\nconst bestMatch = (needle, getSearchTerms) => candidate => {\n  const { minScore, index } = getSearchTerms(candidate)\n    .map(term => hasEveryCharacterInOrder(needle)(term) ? indexScore(needle, term) : Infinity)\n    .reduce(({ minScore, index }, score, i) => {\n      if (score < minScore) return { minScore: score, index: i }\n\n      return { minScore, index }\n    }, { minScore: Infinity, index: 0 })\n\n  if (!isFinite(minScore)) return { score: minScore }\n\n  return {\n    score: minScore,\n    item: candidate,\n    match: { index, indexes: matchIndexes(needle, getSearchTerms(candidate)[index]) }\n  }\n}\n\nmodule.exports = (haystack, needle, getSearchTerms = x => [x]) => haystack\n  .map(bestMatch(needle, getSearchTerms))\n  .filter(({ score }) => isFinite(score))\n  .sort((match, other) => {\n    const matchScore = match.score\n    const otherScore = other.score\n\n    const scoreDiff = matchScore - otherScore\n\n    if (scoreDiff === 0) {\n      return match.match.indexes[0] - other.match.indexes[0]\n    }\n\n    return scoreDiff\n  })\n", "export default {\n  new: () => {\n    const listeners = []\n\n    return {\n      emit: (evt, payload) => {\n        listeners\n          .filter(listener => listener.evt === evt)\n          .forEach(listener => {\n            listener.callback(payload)\n          })\n      },\n      on: (evt, callback) => {\n        listeners.push({ evt, callback })\n      }\n    }\n  }\n}\n", "import InfiniteScroller from './infinite-scroller'\nimport IntegerIterator from './integer-iterator'\nconst hebrewNumeralFromInteger = require('./hebrew-numeral')\nconst textFilter = require('./text-filter')\nconst displayRange = require('./display-range')\nconst title = require('./title')\nconst { physicalLocationFromRef } = require('./location')\nconst urlToRef = require('./url-to-ref')\n\nexport { textFilter, hebrewNumeralFromInteger, displayRange, InfiniteScroller, IntegerIterator, title, physicalLocationFromRef, urlToRef }\n", "import { displayRange, textFilter } from '../src'\nconst parshiyot = require('../build/parshiyot.json')\nconst holydays = require('../build/holydays.json')\nconst aliyotJSON = require('../build/aliyot.json')\n\nconst ktivKriAnnotation = text => text.replace(/[{]/g, `<span class=\"ktiv-kri\">`).replace(/[}]/g, `</span>`)\n\nconst petuchaClass = (isPetucha) => isPetucha ? 'mod-petucha' : ''\nconst setumaClass = (column) => column.length > 1 ? 'mod-setuma' : ''\n\nconst aliyahFinderByScroll = {\n  torah: parshiyot,\n  ...Object.keys(holydays).reduce((result, holydayKey) => {\n    return { ...result, [holydayKey]: [holydays[holydayKey]] }\n  }, {})\n}\n\nconst aliyotByRefByScroll = aliyotJSON\n\n\nconst getParshaName = (verses, __scroll) => () => parshaName(verses, __scroll)\n\nconst aliyotDisplay = ({ verses, scroll: __scroll }) => {\n  const found = verses.map(({ book, chapter, verse }) => {\n    return aliyotByRefByScroll[__scroll]?.[book]?.[chapter]?.[verse]\n  }).filter(Boolean)\n\n  if (!found.length) return ''\n\n  const { standard, double, special } = found[0]\n\n  return [\n    ...standard ? [standard.map(n => displayRange.aliyahName({ aliyah: n, getParshaName: getParshaName(verses, __scroll ) })).join(', ')] : [],\n    ...double ? [`[${displayRange.aliyahName({ aliyah: double, getParshaName: getParshaName(verses, __scroll ) })}]`] : [],\n    ...special ? [`(${displayRange.aliyahName({ aliyah: special, getParshaName: getParshaName(verses, __scroll)})})`] : []\n  ].join(' ')\n}\n\nconst parshaName = (verses, __scroll) => {\n  const found = aliyahFinderByScroll[__scroll]\n  .find(({ ref }) => verses\n    .some(({ book: b, chapter: c, verse: v }) => ref.b === b && ref.c === c && ref.v === v\n    )\n  )\n\n  return (found || { he: '\u05E8\u05D0\u05E9\u05D5\u05DF' }).he\n}\n\nconst Line = ({ scroll: __scroll, text, verses, aliyot, isPetucha }) => `\n  <div class=\"line ${petuchaClass(isPetucha)}\">\n    ${text.map((column) => (`\n      <div class=\"column\">\n        ${column.map((fragment) => (`\n          <span class=\"fragment ${setumaClass(column)} mod-annotations-on\">${ktivKriAnnotation(textFilter({ text: fragment, annotated: true }))}</span>\n          <span class=\"fragment ${setumaClass(column)} mod-annotations-off\">${ktivKriAnnotation(textFilter({ text: fragment, annotated: false }))}</span>\n        `)).join('')}\n      </div>\n    `)).join('')}\n    <span class=\"location-indicator mod-verses\">${displayRange.asVersesRange(verses)}</span>\n    <span class=\"location-indicator mod-aliyot\" data-target-id=\"aliyot-range\">${aliyotDisplay({ verses, scroll: __scroll })}</span>\n  </div>\n`\n\nexport default Line\n", "import Line from './Line'\n\nconst Page = ({ scroll: _scroll, lines }) => `\n  <table>\n    ${lines.map((line) => (`\n      <tr>\n        <td>${Line({ scroll: _scroll, ...line })}</td>\n      </tr>\n    `)).join('')}\n  </table>\n`\n\nexport default Page\n", "/* global gtag */\n\nimport parshiyot from '../build/parshiyot.json'\nimport readingSchedule from '../build/schedule.json'\nimport holydays from '../build/holydays.json'\nimport fuzzy from '../src/fuzzy'\nimport utils from './utils'\nimport ParshaResult, { NoResults } from './ParshaResult'\n\nconst { htmlToElement } = utils\n\nconst holydaysLayout = [\n  ['rosh-1', 'rosh-2', 'yom-kippur', 'taanit-tzibur', 'tisha-bav', 'shavuot-1', 'shavuot-2'],\n  ['sukkot-1', 'sukkot-2', 'sukkot-3', 'sukkot-4', 'sukkot-5', 'sukkot-6', 'sukkot-7', 'sukkot-shabbat-chol-hamoed', 'shmini-atzeret', 'simchat-torah'],\n  ['pesach-1', 'pesach-2', 'pesach-3', 'pesach-4', 'pesach-5', 'pesach-6', 'pesach-shabbat-chol-hamoed', 'pesach-7', 'pesach-8'],\n  ['purim', 'chanukah-1', 'chanukah-2', 'chanukah-3', 'chanukah-4', 'chanukah-5', 'chanukah-7', 'chanukah-8']\n]\n\nconst Parsha = ({ ref, he, scroll }) => `\n  <li\n    class=\"parsha\"\n    data-target-id=\"parsha\"\n    data-jump-to-book=\"${ref.b}\"\n    data-jump-to-chapter=\"${ref.c}\"\n    data-jump-to-verse=\"${ref.v}\"\n    data-scroll=\"${scroll}\"\n  >\n    ${he}\n  </li>\n  `\n\nconst Book = (book) => `\n  <li class=\"parsha-book\">\n    <ol class=\"parsha-list\">\n      ${book.map(b => Parsha({ ...b, scroll: 'torah' })).join('')}\n    </ol>\n  </li>\n`\n\nconst refFromLabel = ({ label }) => parshiyot\n  .find(({ he }) => label.startsWith(he))\n  .ref\n\nconst ComingUpReading = ({ label, date, datetime }) => {\n  const { b: book, c: chapter, v: verse } = refFromLabel({ label })\n  return `\n  <li style=\"display: table-cell; width: calc(100% / 3); padding: 0 0.5em;\">\n    <div class=\"stack small\" style=\"display: flex; flex-direction: column; align-items: center;\">\n      <button\n        data-target-class=\"coming-up-reading\"\n        data-jump-to-book=\"${book}\"\n        data-jump-to-chapter=\"${chapter}\"\n        data-jump-to-verse=\"${verse}\"\n        data-scroll=\"torah\"\n        class=\"coming-up-button\"\n      >${label}</button>\n      <time class=\"coming-up-date\" datetime=\"${datetime}\">${date}</time>\n    </div>\n  </li>\n  `\n}\n\nconst comingUpReadings = readingSchedule\n  .filter(reading => new Date(reading.datetime) > new Date())\n  .slice(0, 3)\n\nconst ComingUp = () => `\n  <section dir=\"ltr\" id=\"coming-up\" class=\"section mod-alternate mod-padding\">\n    <div class=\"stack medium\">\n      <label class=\"section-label\">Coming up</label>\n      <div style=\"overflow-x: auto;\">\n        <ol class=\"cluster\" style=\"list-style: none; display: table; margin-left: auto; margin-right: auto; white-space: nowrap;\">\n          ${comingUpReadings\n            .map(ComingUpReading)\n            .join('')\n          }\n        </ol>\n      </div>\n    </div>\n  </section>\n`\n\nconst Browse = () => `\n  <div class=\"browse\">\n    <h2 class=\"section-heading\">\u05E4\u05E8\u05E9\u05EA \u05D4\u05E9\u05D1\u05D5\u05E2</h2>\n    <ol class=\"parsha-books mod-emphasize-first-in-group\">\n      ${parshiyot\n        .reduce((books, parsha) => {\n          const book = parsha.ref.b\n          books[book] = books[book] || []\n          books[book].push(parsha)\n          return books\n        }, [])\n        .map(Book)\n        .join('')\n      }\n    </ol>\n\n    <h2 class=\"section-heading\">\u05D7\u05D2\u05D9\u05DD</h2>\n    <ol class=\"parsha-books\">\n      ${holydaysLayout.map(col => `\n        <li class=\"parsha-book\">\n          <ol class=\"parsha-list\">\n            ${col.map(holydayKey => {\n              const holyday = holydays[holydayKey]\n\n              const { ref, he } = holyday\n\n              const { b, c, v } = ref\n\n              return Parsha({ ref: { b, c, v }, he, scroll: holydayKey })\n            }).join('\\n')}\n          </ol>\n        </li>\n      `).join('\\n')}\n    </ol>\n\n    <h2 class=\"section-heading\">\u05DE\u05D2\u05D9\u05DC\u05D5\u05EA</h2>\n    <ol class=\"parsha-books\">\n      <li class=\"parsha-book\">\n        <ol class=\"parsha-list\">\n          ${Parsha({ ref: { b: 1, c: 1, v: 1 }, he: '\u05D0\u05E1\u05EA\u05E8', scroll: 'esther' })}\n        </ol>\n      </li>\n    </ol>\n  </div>\n`\n\nconst ParshaPicker = (search, searchEmitter, jumpToRef) => {\n  const self = htmlToElement(`\n    <div class=\"parsha-picker\">\n      <div class=\"stack xlarge\">\n        <div class=\"centerize\">\n          <div id=\"search\" style=\"display: inline-block;\"></div>\n        </div>\n        ${ComingUp()}\n        ${Browse()}\n      </div>\n    </div>\n  `)\n\n  searchEmitter.on('selection', (selected) => {\n    gtag('event', 'search_selection', {\n      event_category: 'navigation',\n      event_label: selected.querySelector('[data-target-class=\"result-hebrew\"]').textContent.trim()\n    })\n\n    const result = selected.querySelector('[data-target-class=\"parsha-result\"]')\n\n    jumpToRef({ ref: result, scroll: result.getAttribute('data-scroll') })\n  })\n\n  searchEmitter.on('search', query => {\n    self.querySelector('.browse').classList.add('u-hidden')\n    self.querySelector('#coming-up').classList.add('u-hidden')\n    gtag('event', 'search', {\n      event_category: 'navigation',\n      event_label: query\n    })\n  })\n\n  searchEmitter.on('clear', () => {\n    self.querySelector('.browse').classList.remove('u-hidden')\n    self.querySelector('#coming-up').classList.remove('u-hidden')\n  })\n\n  self.querySelector('#search').parentNode.replaceChild(search, self.querySelector('#search'))\n\n  ;[...self.querySelectorAll('[data-target-id=\"parsha\"]')]\n    .forEach((parsha) => {\n      parsha.addEventListener('click', (e) => {\n        gtag('event', 'browse_selection', {\n          event_category: 'navigation',\n          event_label: e.target.textContent.trim()\n        })\n        jumpToRef({ ref: e.target, scroll: e.target.getAttribute('data-scroll') })\n      })\n    })\n\n  ;[...self.querySelectorAll('[data-target-class=\"coming-up-reading\"]')]\n    .forEach((comingUpReading, index) => {\n      comingUpReading.addEventListener('click', e => {\n        gtag('event', 'coming_up_selection', {\n          event_category: 'navigation',\n          event_label: ['due up', 'on deck', 'in the hole'][index]\n        })\n\n        jumpToRef({ ref: e.target, scroll: e.target.getAttribute('data-scroll') })\n      })\n    })\n\n  return self\n}\n\nconst searchables = [\n  ...parshiyot.map(p => ({ ...p, scroll: 'torah' })),\n  {\n    he: '\u05D0\u05E1\u05EA\u05E8',\n    en: 'Esther',\n    ref: { b: 1, c: 1, v: 1 },\n    scroll: 'esther'\n  },\n  ...Object.keys(holydays).map(holydayKey => {\n    const holyday = holydays[holydayKey]\n\n    const { he, en, ref } = holyday\n\n    const { b, c, v } = ref\n\n    return {\n      scroll: holydayKey,\n      en,\n      he,\n      ref: { b, c, v }\n    }\n  })\n]\n\nconst searchResults = (query) => {\n  const results = fuzzy(searchables, query, parsha => [parsha.he, parsha.en])\n\n  return results.length ? results : [{\n    item: 'No results',\n    match: { index: 0, indexes: [] }\n  }]\n}\n\nconst top = (n) => (_, i) => i < n\n\nconst search = query => searchResults(query)\n  .filter(top(5))\n  .map(result => result.item === 'No results'\n    ? NoResults()\n    : ParshaResult(result)\n  )\n\nexport { search }\n\nexport default ParshaPicker\n", "const htmlToElement = (html) => {\n  const template = document.createElement('template')\n  html = html.trim() // Never return a text node of whitespace as the result\n  template.innerHTML = html\n  return template.content.firstChild\n}\n\nconst getKeys = (key) => {\n  if (typeof key === 'string') return { key, ctrl: false }\n\n  return key\n}\n\nconst whenKey = (key, callback) => e => {\n  const { key: k, ctrl } = getKeys(key)\n\n  if (e.ctrlKey === ctrl && e.key === k && !e.repeat) callback(e)\n}\n\nconst purgeNode = (node) => {\n  while (node.firstChild) node.removeChild(node.firstChild)\n}\n\nexport default {\n  htmlToElement,\n  whenKey,\n  purgeNode\n}\n", "import utils from './utils'\n\nconst { htmlToElement } = utils\n\nconst decorateString = ({ string, atIndexes, withDecoration }) => {\n  let indexesIndex = 0\n  return string\n    .split('')\n    .map((char, i) => {\n      if (atIndexes[indexesIndex] !== i) return char\n\n      ++indexesIndex\n      return withDecoration(char)\n    }, '')\n    .join('')\n}\n\nconst strongify = (c) => (`<strong>${c}</strong>`)\n\nconst ParshaResult = ({ match, item }) => htmlToElement(`\n  <div data-target-class=\"parsha-result\" data-jump-to-book=\"${item.ref.b}\" data-jump-to-chapter=\"${item.ref.c}\" data-jump-to-verse=\"${item.ref.v}\" data-scroll=\"${item.scroll}\">\n    <p class=\"search-result-tag mod-hebrew\" data-target-class=\"result-hebrew\">${match.index === 0 ? decorateString({\n      string: item.he,\n      atIndexes: match.indexes,\n      withDecoration: strongify\n    }) : item.he}\n    </p>\n    <p class=\"search-result-tag\">${match.index === 1 ? decorateString({\n      string: item.en,\n      atIndexes: match.indexes,\n      withDecoration: strongify\n    }) : item.en}\n    </p>\n  </div>\n`)\n\nexport default ParshaResult\n\nconst NoResults = () => htmlToElement(`<p class=\"\" style=\"text-align: center; color: var(--light-text-color);\">\n  No results\n</p>\n`)\n\nexport { NoResults }\n", "import utils from './utils'\n\nconst { htmlToElement } = utils\n\nconst setSelected = (list, adjustSelected) => {\n  const items = [...list.querySelectorAll('[data-target-class=\"list-item\"]')]\n\n  const selectedIndex = Math.max(items.findIndex(item => item.getAttribute('data-selected') === 'true'), 0)\n\n  const selected = items[selectedIndex]\n\n  selected.removeAttribute('data-selected')\n\n  const nextIndex = (adjustSelected(selectedIndex) + items.length) % items.length\n\n  items[nextIndex].setAttribute('data-selected', 'true')\n}\n\nexport { setSelected }\n\nconst getSelected = (list) => list.querySelector('[data-target-class=\"list-item\"][data-selected=\"true\"]')\n\nexport { getSelected }\n\nconst SelectList = (items, el, onSelect) => {\n  const list = htmlToElement(`\n    <ol class=\"list\"></ol>\n  `)\n\n  items.forEach(item => {\n    const listItem = htmlToElement('<li class=\"list-item\" data-target-class=\"list-item\"></li>')\n    listItem.appendChild(item)\n    listItem.addEventListener('click', () => {\n      onSelect(listItem)\n    })\n    list.appendChild(listItem)\n  })\n\n  list\n    .querySelector('[data-target-class=\"list-item\"]')\n    .setAttribute('data-selected', 'true')\n\n  return list\n}\n\nexport default SelectList\n", "import utils from './utils'\nimport SelectList, { setSelected, getSelected } from './SelectList'\n\nconst { htmlToElement: html, whenKey, purgeNode } = utils\n\nconst Search = ({ search, emitter }) => {\n  let list\n\n  const self = html(`\n    <div class=\"search\">\n      <div class=\"search-bar\">\n        <span class=\"search-icon\">\u26B2</span>\n        <input class=\"search-input\" placeholder=\"Search...\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" autofocus />\n      </div>\n      <div class=\"search-results u-hidden\">\n      </div>\n    </div>\n  `)\n\n  self.addEventListener('keydown', whenKey('Enter', () => {\n    emitter.emit('selection', getSelected(list))\n  }))\n\n  const onSelect = item => emitter.emit('selection', item)\n\n  ;[\n    { key: 'ArrowDown', adjustment: selected => selected + 1 },\n    { key: 'ArrowUp', adjustment: selected => selected - 1 },\n    { key: { key: 'n', ctrl: true }, adjustment: selected => selected + 1 },\n    { key: { key: 'p', ctrl: true }, adjustment: selected => selected - 1 }\n  ].forEach(({ key, adjustment }) => self.addEventListener('keydown', whenKey(key, e => {\n    e.preventDefault()\n    setSelected(list, adjustment)\n  })))\n\n  const searchInput = self.querySelector('.search-input')\n  const searchResults = self.querySelector('.search-results')\n\n  searchInput.addEventListener('input', (e) => {\n    const query = e.target.value\n\n    purgeNode(searchResults)\n\n    if (query) {\n      emitter.emit('search', query)\n      const results = search(query)\n      list = SelectList(results, searchInput, onSelect)\n\n      searchResults.appendChild(list)\n      searchResults.classList.remove('u-hidden')\n    } else {\n      emitter.emit('clear')\n      searchResults.classList.add('u-hidden')\n    }\n  })\n\n  self.focus = () => {\n    searchInput.focus()\n  }\n\n  return self\n}\n\nexport default Search\n", "/* global gtag */\n\nimport EventEmitter from './src/event-emitter'\nimport { InfiniteScroller, IntegerIterator, title as getTitle, physicalLocationFromRef, urlToRef } from './src'\nimport Page from './components/Page'\nimport ParshaPicker, { search } from './components/ParshaPicker'\nimport Search from './components/Search'\nimport utils from './components/utils'\nimport pageTitles from './build/page-titles.json'\nimport holydays from './build/holydays.json'\n\nconst { htmlToElement, whenKey, purgeNode } = utils\n\nconst insertBefore = (parent, child) => {\n  parent.insertAdjacentElement('afterbegin', child)\n}\n\nconst insertAfter = (parent, child) => {\n  parent.insertAdjacentElement('beforeend', child)\n}\n\nlet scroll\n\nconst renderTitle = ({ title }) => {\n  document.querySelector('[data-target-id=\"parsha-title\"]').innerHTML = title\n}\n\nconst makePageNode = ({ title }) => {\n  const node = document.createElement('div')\n  node.classList.add('tikkun-page')\n  node.setAttribute('data-page-title', title)\n\n  return node\n}\n\nconst scrollToLine = ({ node, lineIndex }) => {\n  const lines = [...node.querySelectorAll('.line')]\n\n  const line = lines[lineIndex]\n\n  const book = document.querySelector('.tikkun-book')\n\n  book.scrollTop = line.offsetTop + (line.offsetHeight / 2) - (book.offsetHeight / 2)\n}\n\nconst scrollsByKey = () => ({\n  'torah': TorahScroll,\n  'esther': EstherScroll,\n  ...Object.keys(holydays).reduce((result, holydayKey) => {\n    const HolydayScroll = {\n      new: ({ startingAtRef }) => {\n        return Scroll.new({\n          scroll: holydayKey,\n          makePath: n => `/build/pages/${holydayKey}/${n}.json`,\n          makeTitle: n => holydays[holydayKey].he,\n          startingAtRef\n        })\n      }\n    }\n    return { ...result, [holydayKey]: HolydayScroll }\n  }, {})\n})\n\nconst Scroll = {\n  new: ({ scroll, makePath, makeTitle, startingAtRef = { b: 1, c: 1, v: 1 } }) => {\n    const { pageNumber, lineNumber } = physicalLocationFromRef({ ref: startingAtRef, scroll })\n\n    const iterator = IntegerIterator.new({ startingAt: pageNumber })\n\n    return {\n      scrollName: scroll,\n      fetchPrevious: () => {\n        const n = iterator.previous()\n        if (n <= 0) return Promise.resolve()\n        return fetchPage({ path: makePath(n), title: makeTitle(n) })\n      },\n      fetchNext: () => {\n        const n = iterator.next()\n        return fetchPage({ path: makePath(n), title: makeTitle(n) })\n      },\n      startingLineNumber: lineNumber\n    }\n  }\n}\n\nconst TorahScroll = {\n  new: ({ startingAtRef }) => {\n    return Scroll.new({\n      scroll: 'torah',\n      makePath: n => `/build/pages/torah/${n}.json`,\n      makeTitle: n => getTitle(pageTitles[n - 1]),\n      startingAtRef\n    })\n  }\n}\n\nconst EstherScroll = {\n  new: ({ startingAtRef }) => {\n    return Scroll.new({\n      scroll: 'esther',\n      makePath: n => `/build/pages/esther/${n}.json`,\n      makeTitle: n => '\u05D0\u05E1\u05EA\u05E8',\n      startingAtRef\n    })\n  }\n}\n\nconst app = {\n  jumpTo: ({ ref, scroll: _scroll }) => {\n    scroll = scrollsByKey()[_scroll].new({ startingAtRef: ref })\n\n    purgeNode(document.querySelector('[data-target-id=\"tikkun-book\"]'))\n\n    scroll.fetchNext()\n      .then(renderNext)\n      .then((pageNode) => {\n        scrollToLine({ node: pageNode, lineIndex: scroll.startingLineNumber - 1 })\n      })\n\n    hideParshaPicker()\n\n    return Promise.resolve()\n  }\n}\n\nconst refOf = element => {\n  const refPart = (part) => Number(element.getAttribute(`data-jump-to-${part}`))\n\n  return { b: refPart('book'), c: refPart('chapter'), v: refPart('verse') }\n}\n\nconst setVisibility = ({ selector, visible }) => {\n  const classList = document.querySelector(selector).classList\n\n  classList[visible ? 'remove' : 'add']('u-hidden')\n  classList[visible ? 'remove' : 'add']('mod-animated')\n}\n\nconst showParshaPicker = () => {\n  ;[\n    { selector: '[data-test-id=\"annotations-toggle\"]', visible: false },\n    { selector: '[data-target-id=\"repo-link\"]', visible: false },\n    { selector: '[data-target-id=\"tikkun-book\"]', visible: false }\n  ]\n    .forEach(({ selector, visible }) => setVisibility({ selector, visible }))\n\n  const searchEmitter = EventEmitter.new()\n\n  const s = Search({ search, emitter: searchEmitter })\n  const jumper = ParshaPicker(s, searchEmitter, ({ ref, scroll }) => app.jumpTo({ ref: refOf(ref), scroll }))\n  document.querySelector('#js-app').appendChild(jumper)\n  gtag('event', 'view', {\n    event_category: 'navigation'\n  })\n\n  setTimeout(() => s.focus(), 0)\n}\n\nconst hideParshaPicker = () => {\n  ;[\n    { selector: '[data-test-id=\"annotations-toggle\"]', visible: true },\n    { selector: '[data-target-id=\"repo-link\"]', visible: true },\n    { selector: '[data-target-id=\"tikkun-book\"]', visible: true }\n  ]\n    .forEach(({ selector, visible }) => setVisibility({ selector, visible }))\n\n  document.querySelector('.parsha-picker') && document.querySelector('#js-app').removeChild(document.querySelector('.parsha-picker'))\n}\n\nconst toggleParshaPicker = () => {\n  const isShowingParshaPicker = Boolean(document.querySelector('.parsha-picker'))\n\n  if (isShowingParshaPicker) {\n    hideParshaPicker()\n  } else {\n    showParshaPicker()\n  }\n}\n\nconst toggleAnnotations = (getPreviousCheckedState) => {\n  const toggle = document.querySelector('[data-target-id=\"annotations-toggle\"]')\n\n  toggle.checked = !getPreviousCheckedState()\n\n  const book = document.querySelector('[data-target-id=tikkun-book]')\n\n  book.classList.toggle('mod-annotations-on', toggle.checked)\n  book.classList.toggle('mod-annotations-off', !toggle.checked)\n}\n\nconst scrollState = {\n  lastScrolledPosition: 0,\n  pageAtTop: null\n}\n\nconst resumeLastScrollPosition = () => {\n  if (!scrollState.pageAtTop) return\n  const book = document.querySelector('.tikkun-book')\n  const pageRect = scrollState.pageAtTop.getBoundingClientRect()\n\n  book.scrollTop = scrollState.pageAtTop.offsetTop + (scrollState.lastScrolledPosition * pageRect.height)\n}\n\nconst rememberLastScrolledPosition = () => {\n  const book = document.querySelector('.tikkun-book')\n  const bookBoundingRect = book.getBoundingClientRect()\n\n  const topOfBookRelativeToViewport = {\n    x: bookBoundingRect.left + (bookBoundingRect.width / 2),\n    y: bookBoundingRect.top\n  }\n\n  const pageAtTop = [...document.elementsFromPoint(topOfBookRelativeToViewport.x, topOfBookRelativeToViewport.y)]\n    .find(el => el.className.includes('tikkun-page'))\n\n  if (!pageAtTop) return\n\n  scrollState.pageAtTop = pageAtTop\n  scrollState.lastScrolledPosition = (book.scrollTop - pageAtTop.offsetTop) / pageAtTop.clientHeight\n}\n\nconst updatePageTitle = () => {\n  const bookBoundingRect = document.querySelector('.tikkun-book').getBoundingClientRect()\n\n  const centerOfBookRelativeToViewport = {\n    x: bookBoundingRect.left + (bookBoundingRect.width / 2),\n    y: bookBoundingRect.top + (bookBoundingRect.height / 2)\n  }\n\n  const pageAtCenter = [...document.elementsFromPoint(centerOfBookRelativeToViewport.x, centerOfBookRelativeToViewport.y)]\n    .find(el => el.className.includes('tikkun-page'))\n\n  if (!pageAtCenter) return\n\n  renderTitle({ title: pageAtCenter.getAttribute('data-page-title') })\n}\n\nlet lastCalled = Date.now()\nconst throttle = f => {\n  if (Date.now() - lastCalled > 300) {\n    lastCalled = Date.now()\n    f()\n  }\n}\n\nconst renderPage = ({ insertStrategy: insert }) => ({ content, title }) => {\n  const node = makePageNode({ title })\n\n  insert(document.querySelector('[data-target-id=\"tikkun-book\"]'), node)\n\n  const el = htmlToElement(Page({ scroll: scroll.scrollName, lines: content }))\n\n  const firstChild = node.firstChild\n  if (firstChild) {\n    node.replaceChild(el, firstChild)\n  } else {\n    node.appendChild(el)\n  }\n\n  renderTitle({ title })\n\n  return node\n}\n\nconst renderPrevious = renderPage({ insertStrategy: insertBefore })\nconst renderNext = renderPage({ insertStrategy: insertAfter })\n\nconst fetchPage = ({ path, title }) => window.fetch(path)\n  .then((res) => res.json())\n  .then((page) => ({ content: page, title }))\n  .catch((err) => {\n    console.error(err)\n  })\n\nconst debounce = (callback, delay) => {\n  let timeout\n  return () => {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      callback()\n    }, delay)\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const book = document.querySelector('[data-target-id=\"tikkun-book\"]')\n  const toggle = document.querySelector('[data-target-id=\"annotations-toggle\"]')\n\n  InfiniteScroller\n    .new({\n      container: book,\n      fetchPreviousContent: { fetch: () => scroll.fetchPrevious(), render: renderPrevious },\n      fetchNextContent: { fetch: () => scroll.fetchNext(), render: renderNext }\n    })\n    .attach()\n\n  book.addEventListener('scroll', () => {\n    throttle(() => updatePageTitle())\n  })\n\n  book.addEventListener('scroll', debounce(() => {\n    rememberLastScrolledPosition()\n  }, 1000))\n\n  window.addEventListener('resize', () => {\n    resumeLastScrollPosition()\n  })\n\n  toggle.addEventListener('change', (e) => toggleAnnotations(() => !e.target.checked))\n\n  document.addEventListener('keydown', whenKey('Shift', () => toggleAnnotations(() => toggle.checked)))\n  document.addEventListener('keyup', whenKey('Shift', () => toggleAnnotations(() => toggle.checked)))\n\n  document.querySelector('[data-target-id=\"parsha-title\"]').addEventListener('click', toggleParshaPicker)\n  document.addEventListener('keydown', whenKey('/', toggleParshaPicker))\n\n  const startingRef = urlToRef(new URL(window.location.href))\n  app.jumpTo({ ref: startingRef, scroll: 'torah' })\n    .then(hideParshaPicker)\n})\n"],
  "mappings": "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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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",
  "names": []
}
